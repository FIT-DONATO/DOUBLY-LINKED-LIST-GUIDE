#include <iostream>
#include <string>
using namespace std;

// Struct for storing data records
struct KindOfProgram {
    int dataNo;
    double doubleData;
    string stringData;
    KindOfProgram* next;
    KindOfProgram* prev;
};

// Function prototypes
void MainMenu();
void AddData(KindOfProgram*& head, int& numData, int& dataNoCounter);
void ViewData(const KindOfProgram* head);
void UpdateData(KindOfProgram* head);
void DeleteData(KindOfProgram*& head, int& numData);

// Main function
int main() {
    KindOfProgram* head = nullptr; // Head pointer of the linked list
    int numData = 0; // Variable to track the number of data
    int dataNoCounter = 1; // Counter to assign unique data numbers

    // Menu loop
    int choice;
    do {
        MainMenu();
        cin >> choice;
        cin.ignore();
        system("cls");

        switch (choice) {
        case 1:
            AddData(head, numData, dataNoCounter);
            system("pause");
            system("cls");
            break;
        case 2:
            ViewData(head);
            system("pause");
            system("cls");
            break;
        case 3:
            UpdateData(head);
            system("pause");
            system("cls");
            break;
        case 4:
            DeleteData(head, numData);
            system("pause");
            system("cls");
            break;
        case 5:
            cout << "Exiting...\n";
            break;
        default:
            cout << "Invalid choice! Please enter a valid option.\n";
        }
    } while (choice != 5);

    // Free memory allocated for the linked list
    while (head != nullptr) {
        KindOfProgram* temp = head;
        head = head->next;
        delete temp;
    }

    return 0;
}

// Function to display the main menu
void MainMenu() {
    cout << "===== Data Management System =====\n";
    cout << "1. Add a Data\n";
    cout << "2. View All Data\n";
    cout << "3. Update a Data\n";
    cout << "4. Delete a Data\n";
    cout << "5. Exit\n";
    cout << "Enter your choice: ";
}

// Function to add a new data record
void AddData(KindOfProgram*& head, int& numData, int& dataNoCounter) {
    KindOfProgram* newData = new KindOfProgram;
    cout << "-- PLEASE FILL UP THE FORM WITH YOUR INFO --" << endl;
    newData->dataNo = dataNoCounter++;
    cout << "String Data: ";
    getline(cin, newData->stringData);
    cout << "Double Data: ";
    cin >> newData->doubleData;
    cin.ignore();

    // Insert at the beginning of the list
    newData->next = head;
    newData->prev = nullptr;
    if (head != nullptr) {
        head->prev = newData;
    }
    head = newData;

    cout << "New Data has been added successfully!" << endl;
    numData++;
}

// Function to view all data records
void ViewData(const KindOfProgram* head) {
    if (head == nullptr) {
        cout << "No data in the records yet" << endl;
        return;
    }

    cout << "Data Records:" << endl;
    const KindOfProgram* current = head;
    while (current != nullptr) {
        cout << "Data No: " << current->dataNo << endl;
        cout << "String Data: " << current->stringData << endl;
        cout << "Double Data: " << current->doubleData << endl;
        cout << endl;
        current = current->next;
    }
}

// Function to update a data record
void UpdateData(KindOfProgram* head) {
    if (head == nullptr) {
        cout << "No data in the records yet" << endl;
        return;
    }

    int dataNo;
    cout << "Enter Data No to update: ";
    cin >> dataNo;

    KindOfProgram* current = head;
    while (current != nullptr) {
        if (current->dataNo == dataNo) {
            cout << "Enter new string data: ";
            cin.ignore();
            getline(cin, current->stringData);
            cout << "Enter new double data: ";
            cin >> current->doubleData;
            cin.ignore();
            cout << "Data updated successfully!" << endl;
            return;
        }
        current = current->next;
    }

    cout << "Data not found!" << endl;
}

// Function to delete a data record
void DeleteData(KindOfProgram*& head, int& numData) {
    if (head == nullptr) {
        cout << "No data in the records yet" << endl;
        return;
    }

    int dataNo;
    cout << "Enter Data No to delete: ";
    cin >> dataNo;

    KindOfProgram* current = head;
    while (current != nullptr) {
        if (current->dataNo == dataNo) {
            if (current->prev == nullptr) {
                head = current->next;
            }
            else {
                current->prev->next = current->next;
            }
            if (current->next != nullptr) {
                current->next->prev = current->prev;
            }
            delete current;
            numData--;
            cout << "Data deleted successfully!" << endl;
            return;
        }
        current = current->next;
    }

    cout << "Data not found!" << endl;
}
